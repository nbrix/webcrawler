<div id="eventlink" style="display:none">{{eventurl}}</div>
<h3>{{title}}</h3>
<div id="linkcount"></div>
{{#if keyword}}
{{keyword}}
{{/if}}
<div id="main">
  <div id="info"></div>
  <div id="canvas">
    <svg></svg>
  </div>
</div>
<script type="text/javascript">
  var link = document.getElementById("eventlink").innerHTML.replace(/&amp;/g, '&');
  var source = new EventSource(link);

  const data = {
    nodes: [],
    links: [],
  }

  const linkedByIndex = {};

  // Create canvas for graph
  const svgCanvas = d3.select('svg');
  // Get width and height of window for canvas size
  const width = window.innerWidth;
  const height = window.innerHeight;

  // Set container dimensions
  svgCanvas
    .attr('width', width)
    .attr('height', height);

  // Set colorScheme for the nodes
  const nodeColor = d3.scaleOrdinal(d3.schemeSet2);
  var shape = d3.scaleOrdinal(d3.symbols)

  // Create D3 force instance --> controls all forces acting on graph
  const graphSimulation = d3.forceSimulation();

  // Create forces to act upon simulation
  const linkForce = d3.forceLink().id(d => d.url).distance(125).strength(0.5);
  const chargeForce = d3.forceManyBody().strength(-420);
  const centerForce = d3.forceCenter(width / 2, height / 2);
  const collisionForce = d3.forceCollide();

  // Append forces to simulation instance
  graphSimulation
    .force('link', linkForce)
    .force('center', centerForce)
    .force('charge', chargeForce)
  //.force('collision', collisionForce);

  // Wrapper for all the elements within the graph
  const graphWrapper = svgCanvas.append('g');


  // Group for all links between nodes
  let linkElements = graphWrapper.append('g')
    .attr('class', 'links')
    .selectAll('line')
    .data(data.links)
    .enter().append('line');

  // Group for all nodes within graph
  let nodeElements = graphWrapper.append('g')
    .selectAll('path')
    .data(data.nodes)
    .enter().append('path')



  // Build the graph
  // If node contains the found keyword
  nodeElements
    .filter(d => d.keyword)
    .attr('d', d3.symbol()
      .type(d => d3.symbolStar)
      .size(850))
    .attr('class', 'star')
    .attr('fill', d => nodeColor(d.group));

  // If it is a node without a found keyword
  nodeElements
    .filter(d => !(d.keyword))
    .attr('d', d3.symbol()
      .type(d => d3.symbolCircle)
      .size(325))
    .attr('class', 'circle')
    .attr('fill', d => nodeColor(d.group))

  nodeElements
    .on('click', d => window.open(d.url, '_blank'))
    .on('mouseover.info', displayInfo)
    .on('mouseover.fade', fade(.1))
    .on('mouseover.increase', increaseNodeSize)
    .on('mouseleave.fade', fade(1))
    .on('mouseleave.decrease', decreaseNodeSize)
    .call(d3.drag()
      .on('start', dragStarted)
      .on('drag', dragged)
      .on('end', dragEnded))

  svgCanvas.call(d3.zoom()
    .on('zoom', zoomAction));


  // Start the simulation
  graphSimulation
    .nodes(data.nodes)
    .on('tick', tickAction);

  graphSimulation
    .force('link')
    .links(data.links);

  data.links.forEach(d => {
    linkedByIndex[`${d.source.index},${d.target.index}`] = 1;
  });

  // Helper functions
  function tickAction() {
    linkElements
      .attr('x1', d => d.source.x)
      .attr('y1', d => d.source.y)
      .attr('x2', d => d.target.x)
      .attr('y2', d => d.target.y);
    nodeElements
      .attr('transform', function (d) { return 'translate(' + d.x + ',' + d.y + ')' });
  }

  function dragStarted(d) {
    if (!d3.event.active) graphSimulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragEnded(d) {
    if (!d3.event.active) graphSimulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

  //add on doubleclick listener to release nodes
  function releaseNode(d) {
    d.fx = null;
    d.fy = null;
  }

  //Handles pan/zoom event for graph
  function zoomAction() {
    graphWrapper.attr('transform', d3.event.transform);
  }

  function displayInfo(d) {
    const infoBox = d3.select('#info');
    if (d.keyword) {
      infoBox.html(`<h1>Keyword Found</h1>
											<h2>Page Title: ${d.title}</h2>
											<h3>URL: <span id="url">${d.url}</span></h3>`);
    } else {
      infoBox.html(`<h2>Page Title: ${d.title}</h2>
										<h3>URL: <span id="url">${d.url}</span></h3>`);
    }
  }

  function isConnected(a, b) {
    return linkedByIndex[`${a.index},${b.index}`] || linkedByIndex[`${b.index},${a.index}`] || a.index === b.index;
  }

  function fade(opacity) {
    return function (d) {
      nodeElements.style('stroke-opacity', function (o) {
        let thisOpacity = isConnected(d, o) ? 1 : opacity;
        this.setAttribute('fill-opacity', thisOpacity);
        this.setAttribute('stroke-width', '1px');
        return thisOpacity;
      });
      linkElements.style('stroke-opacity', o => (o.source === d || o.target === d ? 1 : opacity));
    };
  }

  function increaseNodeSize(d) {
    const node = d3.select(this);
    if (d.keyword) {
      node
        .transition()
        .duration(500)
        .attr('d', d3.symbol()
          .type(d3.symbolStar)
          .size(1750));
    } else {
      node
        .transition()
        .duration(500)
        .attr('d', d3.symbol()
          .type(d3.symbolCircle)
          .size(1000));
    }
  }

  function decreaseNodeSize(d) {
    const node = d3.select(this);
    if (d.keyword) {
      node
        .transition()
        .duration(500)
        .attr('d', d3.symbol()
          .type(d3.symbolStar)
          .size(850))
    } else {
      node
        .transition()
        .duration(500)
        .attr('d', d3.symbol()
          .type(d3.symbolCircle)
          .size(325))
    }
  }

  function update() {
    linkElements = linkElements.data(data.links);
    linkElements.exit().remove();
    linkElements = linkElements.enter().append('line')
      .attr('class', 'links')
      .merge(linkElements);

    nodeElements = nodeElements.data(data.nodes);
    nodeElements.exit().remove();
    nodeElements = nodeElements.enter().append('path')
      .merge(nodeElements);

    // If node contains the found keyword
    nodeElements
      .filter(d => d.keyword)
      .attr('d', d3.symbol()
        .type(d => d3.symbolStar)
        .size(850))
      .attr('class', 'star')
      .attr('fill', d => nodeColor(d.group));

    // If it is a node without a found keyword
    nodeElements
      .filter(d => !(d.keyword))
      .attr('d', d3.symbol()
        .type(d => d3.symbolCircle)
        .size(325))
      .attr('class', 'circle')
      .attr('fill', d => nodeColor(d.group))

    nodeElements
      .on('click', d => window.open(d.url, '_blank'))
      .on('mouseover.info', displayInfo)
      .on('mouseover.fade', fade(.1))
      .on('mouseover.increase', increaseNodeSize)
      .on('mouseleave.fade', fade(1))
      .on('mouseleave.decrease', decreaseNodeSize)
      .call(d3.drag()
        .on('start', dragStarted)
        .on('drag', dragged)
        .on('end', dragEnded))


    svgCanvas.call(d3.zoom()
      .on('zoom', zoomAction));

    // Start the simulation
    graphSimulation
      .nodes(data.nodes)
      .on('tick', tickAction);

    graphSimulation
      .force('link')
      .links(data.links);

    graphSimulation.alpha(.65).restart();
  }

  var numberOfLinks = 0;

  // Listening to server for data
  source.addEventListener('message', function (e) {
    var link = JSON.parse(e.data);
	
	numberOfLinks = numberOfLinks + 1;
	var paragraph = document.getElementById("linkcount");
	paragraph.innerHTML = "Links Found: " + numberOfLinks;
	if (numberOfLinks >= 300) {
		paragraph.innerHTML = "Maximum number of links reached: " + numberOfLinks;
	}
    //console.log('Parsed graphData: ', link);

    //Temporarily hold new nodes and links between nodes
    const newNodes = [];
    const newLinks = [];

    //create node and link object that d3 understands

    newNodes.push({ title: link.title, url: link.url, group: link.group, keyword: link.keyword });
    newLinks.push({ source: `${link.prevURL ? link.prevURL : link.url}`, target: link.url });

    //Add new data to old data
    data.nodes = [...data.nodes, ...newNodes];
    data.links = [...data.links, ...newLinks];

    //call update to add new data to the graph
    update();

    //Add new link connections to linkedByIndex object
    newLinks.forEach(link => { linkedByIndex[`${link.source.index},${link.target.index}`] = 1; });
  }, false);
  source.addEventListener('close', function (e) {
    //update();
    source.close();
  }, false);
</script>